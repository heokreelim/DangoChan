spring.application.name=DangoChan

# 서버 포트번호 설정
server.port=9323

# Log level 설정
logging.level.root=info

# DB (MySQL) 연동 설정
spring.datasource.url=jdbc:mysql://localhost:3306/dangochan?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.username=root
spring.datasource.password=root

# 로그에 출력되는 쿼리 포메팅
# JPA의 구현체인 Hibernate가 동작하면서 발생한 SQL의 가독성을 높여줌
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.show-sql=true

spring.jpa.properties.hibernate.jdbc.time_zone=UTC

# java -> MySQL 쿼리문으로 변경
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

# HikariCP (기본 커넥션 풀) 설정
spring.datasource.hikari.connection-timeout=20000
spring.datasource.hikari.minimum-idle=10
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.max-lifetime=1800000

# 캐시 설정 여부 false
spring.thymeleaf.cache=false

logging.level.org.springframework.security=DEBUG

# 업로드 용량 설정(default: 1M)
spring.servlet.multipart.max-file-size=100MB
spring.servlet.multipart.max-request-size=100MB

# 파일 저장 위치
spring.servlet.multipart.location=c:/uploadPath

# 페이징을 위한 설정 (페이지당 글 개수)
user.board.pageLimit=10

# Redis 설정 추가
spring.data.redis.host=localhost
spring.data.redis.port=6379

# .env 파일 데이터 불러오기 위해 설정
dotenv.enabled=true

# OAuth2.0
# Line
spring.security.oauth2.client.registration.line.client-id=${LINE_CLIENT_ID}
spring.security.oauth2.client.registration.line.client-secret=${LINE_CLIENT_SECRET}
spring.security.oauth2.client.registration.line.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.line.redirect-uri={baseUrl}/login/oauth2/code/line
spring.security.oauth2.client.registration.line.scope=profile

spring.security.oauth2.client.provider.line.authorization-uri=https://access.line.me/oauth2/v2.1/authorize
spring.security.oauth2.client.provider.line.token-uri=https://api.line.me/oauth2/v2.1/token
spring.security.oauth2.client.provider.line.user-info-uri=https://api.line.me/v2/profile
spring.security.oauth2.client.provider.line.user-name-attribute=userId

# Google
spring.security.oauth2.client.registration.google.client-name=google
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/login/oauth2/code/google
spring.security.oauth2.client.registration.google.scope=profile, email
